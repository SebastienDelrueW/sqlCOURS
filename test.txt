CREATE TABLE t_utilisateurs 
(
    id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    nom VARCHAR(100),
    prenom VARCHAR(100),
    email VARCHAR(255),
    date_naissance DATE,
    pays VARCHAR(255),
    ville VARCHAR(255),
    code_postal VARCHAR(5),
    nombre_achat INT
)

INSERT INTO t_utilisateurs (id, nom, prenom, email, date_naissance, pays, ville, code_postal, nombre_achat) values (NULL, 'Bond', 'James','james.bond@gmail.com','1945-08-04','Angleterre', 'Londres', '93500', NULL);

INSERT INTO t_utilisateurs (id, nom, prenom, email, date_naissance, pays, ville, code_postal, nombre_achat) values (NULL, 'Caroll', 'Stéphanie','stephaniecaroll@gmail.com','1980-01-02','Belgique', 'Bruxelle', '92500', NULL);

INSERT INTO t_utilisateurs (id, nom, prenom, email, date_naissance, pays, ville, code_postal, nombre_achat) values (NULL, 'Dark', 'Michelle','michelledarkl@gmail.com','1969-06-02','France', 'Paris', '75014', NULL);

INSERT INTO t_utilisateurs (id, nom, prenom, email, date_naissance, pays, ville, code_postal, nombre_achat) values (NULL, 'Lune', 'Claudine','claudinelune@gmail.com','1975-03-05','France', 'Paris', '75012', NULL);

SELECT * FROM t_utilisateurs ORDER BY ville ASC

SELECT nom, prenom FROM t_utilisateurs ORDER BY nom ASC

SELECT * FROM t_utilisateurs WHERE ville='Paris'

DELETE FROM t_utilisateurs WHERE nom='Dupont'

CREATE TABLE IF NOT EXISTS employes (
id_employes int(3) NOT NULL AUTO_INCREMENT,
prenom varchar(20) DEFAULT NULL,
nom varchar(20) DEFAULT NULL,
sexe enum('m','f') NOT NULL,
service varchar(30) DEFAULT NULL,
date_embauche date DEFAULT NULL,
salaire float DEFAULT NULL,
PRIMARY KEY (id_employes)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;

INSERT INTO employes (id_employes, prenom, nom, sexe, service, date_embauche, salaire) VALUES
(350, 'Jean-pierre', 'Laborde', 'm', 'direction', '1999-12-09', 5000),
(388, 'Clement', 'Gallet', 'm', 'commercial', '2000-01-15', 2300),
(415, 'Thomas', 'Winter', 'm', 'commercial', '2000-05-03', 3550),
(417, 'Chloe', 'Dubar', 'f', 'production', '2001-09-05', 1900),
(491, 'Elodie', 'Fellier', 'f', 'secretariat', '2002-02-22', 1600),
(509, 'Fabrice', 'Grand', 'm', 'comptabilite', '2003-02-20', 1900),
(547, 'Melanie', 'Collier', 'f', 'commercial', '2004-09-08', 3100),
(592, 'Laura', 'Blanchet', 'f', 'direction', '2005-06-09', 4500),
(627, 'Guillaume', 'Miller', 'm', 'commercial', '2006-07-02', 1900),
(655, 'Celine', 'Perrin', 'f', 'commercial', '2006-09-10', 2700),
(699, 'Julien', 'Cottet', 'm', 'secretariat', '2007-01-18', 1390),
(701, 'Mathieu', 'Vignal', 'm', 'informatique', '2008-12-03', 2000),
(739, 'Thierry', 'Desprez', 'm', 'secretariat', '2009-11-17', 1500),
(780, 'Amandine', 'Thoyer', 'f', 'communication', '2010-01-23', 1500),
(802, 'Damien', 'Durand', 'm', 'informatique', '2010-07-05', 2250),
(854, 'Daniel', 'Chevel', 'm', 'informatique', '2011-09-28', 1700),
(876, 'Nathalie', 'Martin', 'f', 'juridique', '2012-01-12', 3200),
(900, 'Benoit', 'Lagarde', 'm', 'production', '2013-01-03', 2550),
(933, 'Emilie', 'Sennard', 'f', 'commercial', '2014-09-11', 1800),
(990, 'Stephanie', 'Lafaye', 'f', 'assistant', '2015-06-02', 1775);

SELECT DISTINCT(service) FROM employes

SELECT id_employes, prenom, nom, sexe, service, date_embauche, salaire FROM employes

SELECT nom, prenom FROM employes WHERE service='informatique' 

SELECT nom, prenom, date_embauche FROM employes WHERE date_embauche BETWEEN '2006-01-01' AND '2010-12-31'
Affiche moi // quoi ? // de ? // nom de la table // à condition que ..(là où) // les employés sont entrés dans la société entre 2006 et 2010     

CURDATE()

SELECT nom, prenom, date_embauche FROM employes WHERE date_embauche BETWEEN '2006-01-01' AND CURDATE()

SELECT prenom FROM employes WHERE prenom LIKE 's%'  

SELECT prenom FROM employes WHERE prenom LIKE '%s'  

SELECT prenom FROM employes WHERE prenom LIKE '%-%'  

SELECT nom, prenom, service FROM employes WHERE service !='informatique'
SELECT nom, prenom, service FROM employes WHERE service <>'informatique'

SELECT nom, prenom, salaire FROM employes WHERE salaire > 3000

SELECT nom, prenom, salaire FROM employes WHERE salaire < 3000 ORDER BY salaire ASC
SELECT nom, prenom, salaire FROM employes WHERE salaire < 3000 ORDER BY salaire ASC, prenom ASC
SELECT nom, prenom, salaire FROM employes WHERE salaire < 3000 ORDER BY salaire ASC, sexe ASC

SELECT nom, prenom, service, salaire FROM employes ORDER BY salaire DESC LIMIT
SELECT nom, prenom, service, salaire FROM employes ORDER BY salaire DESC LIMIT 0,3


exo.txt 
1. Afficher la profession de l'employé 547.
SELECT service, nom, prenom FROM employes WHERE id_employes = 547;
= Melanie Collier

2. Afficher la date d'embauche de : Amandine.
SELECT date_embauche, prenom FROM employes WHERE prenom ='amandine';
= 2010-01-23 	Amandine

3. Afficher le nombre de commerciaux.
SELECT COUNT(*) AS 'nombre' FROM employes WHERE service ='commercial';
= 6

4. Afficher le coût des commerciaux sur 1 année.
SELECT SUM(salaire*12) FROM employes WHERE service ='commercial';
= 184200

5. Afficher le salaire moyen par service.
SELECT service, ROUND (AVG(salaire)) FROM employes GROUP BY service
=   service	ROUND (AVG(salaire)) 	
    agent_polyvalent 	2500
    assistant 	        1775
    commercial 	        2558
    communication   	1500
    comptabilite 	    1900
    direction 	        4750
    informatique 	    1938
    juridique 	        3200
    production 	        2225
    secretariat 	    1497

6. Afficher le nombre de recrutements sur l'année 2010.
SELECT COUNT(*) AS 'nbr_recrutement_2010' FROM employes WHERE date_embauche BETWEEN '2010-01-01' AND '2010-12-31';
SELECT nom, prenom, date_embauche FROM employes WHERE date_embauche BETWEEN '2010-01-01' AND '2010-12-31';
SELECT COUNT(*) AS 'nbr_recrutement_2010' FROM employes WHERE date_embauche LIKE '2010%';
SELECT COUNT(*) as 'nbr_recrutement_2010' FROM employes WHERE date_embauche  >= '2010-01-01' AND '2010-12-31'      = 9

=   Thoyer 	Amandine 	2010-01-23
    Durand 	Damien 	    2010-07-05

7. Augmenter le salaire pour chaque employé de 100€.
UPDATE employes SET salaire = salaire+100

8. Afficher le nombre de services (différents).
SELECT DISTINCT(service) FROM employes
SELECT COUNT(DISTINCT service) FROM employes;
= 10 services

9. Afficher les informations de l'employé du service commercial gagnant le salaire le plus élevé
SELECT nom, prenom, service date_embauche FROM employes WHERE service = 'commercial' AND salaire = (SELECT MAX(salaire) FROM employes WHERE service ='commercial')
= Winter 	Thomas 	commercial

10. Afficher l'employé ayant été embauché en dernier.
SELECT * FROM employes WHERE date_embauche = (SELECT MAX(date_embauche) FROM employes)
= james 	bond 	m 	agent_polyvalent 	2020-01-02 	2600

//////////////////////////////////////////////////////////////////////////////////////////////////////
Création de la base bibliothèque

CREATE DATABASE IF NOT EXISTS bibliotheque ;
USE bibliotheque ;
CREATE TABLE abonne (
id_abonne INT(3) NOT NULL AUTO_INCREMENT,
prenom VARCHAR(20) NOT NULL,
PRIMARY KEY (id_abonne)
) ENGINE=InnoDB ;

CREATE TABLE emprunt (
id_emprunt INT(3) NOT NULL AUTO_INCREMENT,
id_livre INT(3) DEFAULT NULL,
id_abonne INT(3) DEFAULT NULL,
date_sortie DATE NOT NULL,
date_rendu DATE DEFAULT NULL,
PRIMARY KEY (id_emprunt)
) ENGINE=InnoDB ;

CREATE TABLE livre (
id_livre INT(3) NOT NULL AUTO_INCREMENT,
auteur VARCHAR(30) NOT NULL,
titre VARCHAR(30) NOT NULL,
PRIMARY KEY (id_livre)
) ENGINE=InnoDB ;

ALTER TABLE emprunt ADD FOREIGN KEY ( id_livre ) REFERENCES bibliotheque.livre (id_livre);
ALTER TABLE emprunt ADD FOREIGN KEY ( id_abonne ) REFERENCES bibliotheque.abonne (id_abonne);

INSERT INTO abonne (id_abonne, prenom) VALUES
(1, 'Guillaume'),
(2, 'Benoit'),
(3, 'Chloe'),
(4, 'Laura');

INSERT INTO livre (id_livre, auteur, titre) VALUES
(100, 'GUY DE MAUPASSANT', 'Une vie'),
(101, 'GUY DE MAUPASSANT', 'Bel-Ami '),
(102, 'HONORE DE BALZAC', 'Le père Goriot'),
(103, 'ALPHONSE DAUDET', 'Le Petit chose'),
(104, 'ALEXANDRE DUMAS', 'La Reine Margot'),
(105, 'ALEXANDRE DUMAS', 'Les Trois Mousquetaires');

INSERT INTO emprunt (id_emprunt, id_livre, id_abonne, date_sortie, date_rendu) VALUES
(1, 100, 1, '2014-12-17', '2014-12-18'),
(2, 101, 2, '2014-12-18', '2014-12-20'),
(3, 100, 3, '2014-12-19', '2014-12-22'),
(4, 103, 4, '2014-12-19', '2014-12-22'),
(5, 104, 1, '2014-12-19', '2014-12-28'),
(6, 105, 2, '2015-03-20', '2015-03-26'),
(7, 105, 3, '2015-06-13', NULL),
(8, 100, 2, '2015-06-15', NULL);

Quels sont les titres des livres n'ayant pas été rendu à la bibliothèque ?
SELECT id_livre FROM emprunt WHERE date_rendu IS NULL
=   id_livre 	
    105
    100

SELECT titre FROM livre WHERE id_livre IN (SELECT id_livre FROM emprunt WHERE date_rendu IS NULL)
=   titre 	
    Les Trois Mousquetaires
    Une vie

Nous aimerions connaitre le n° (id) de(s) livre(s) que Chloé a emprunté à la bibliothèque :
SELECT id_livre FROM emprunt WHERE id_abonne = 3
=   id_livre 	
    100
    105

SELECT titre FROM livre WHERE id_livre IN (SELECT id_livre FROM emprunt WHERE id_abonne = 3)
=   titre 	
    Une vie
    Les Trois Mousquetaires

Afficher les prénoms des abonnés ayant emprunté un livre le 19/12/2014
SELECT id_abonne FROM emprunt WHERE date_sortie = '2014-12-19' 
=   id_abonne 	
    3
    4
    1   

SELECT prenom FROM abonne WHERE id_abonne IN (SELECT id_abonne FROM emprunt WHERE date_sortie = '2014-12-19') 
=   prenom 	
    Chloe
    Laura
    Guillaume

ATTENTION la liste des abbonés ayant déjà emprunté un livre d'Alphonse DAUDET

SELECT id_livre FROM livre WHERE auteur = 'Alphonse Daudet' 
=   id_livre  103

SELECT id_abonne FROM emprunt WHERE id_livre IN (SELECT id_livre FROM livre WHERE auteur = 'Alphonse Daudet')
=   id_abonne 	
    4

SELECT prenom FROM abonne WHERE id_abonne IN (SELECT id_abonne FROM emprunt WHERE id_livre IN (SELECT id_livre FROM livre WHERE auteur = 'Alphonse Daudet'))
=   prenom 	
    Laura

SELECT prenom FROM abonne WHERE id_abonne IN (4)
=   prenom 	
    Laura

Afficher le(s) titre de(s) que Chloé a emprumté à la bibliothèque

SELECT id_abonne FROM abonne WHERE prenom ='Chloé'
=   id_abonne 
    3

SELECT id_livre FROM emprunt WHERE id_abonne = (SELECT id_abonne FROM abonne WHERE prenom ='Chloé')
=   id_livre 	
    100
    105

SELECT titre FROM livre WHERE id_livre IN (SELECT id_livre FROM emprunt WHERE id_abonne = (SELECT id_abonne FROM abonne WHERE prenom ='Chloé'))
=   titre 	
    Une vie
    Les Trois Mousquetaires